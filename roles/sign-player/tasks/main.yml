- name: Debian-based distro - Ensure package requirements are met
  become: yes
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
  block:
    - name: Ensure signing key for Google Chrome PPA is up to date
      ansible.builtin.get_url:
        url: https://dl-ssl.google.com/linux/linux_signing_key.pub
        dest: /etc/apt/trusted.gpg.d/google_linux_signing_key.pub
    
    - name: Ensure Google Chrome PPA is present
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/trusted.gpg.d/google_linux_signing_key.pub] http://dl.google.com/linux/chrome/deb/ stable main

    - name: Update apt repositories
      ansible.builtin.apt:
        update_cache: yes

    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - xorg
        - xinit
        - xdotool
        - x11-xserver-utils
        - python3

    - name: Ensure Browser is installed
      ansible.builtin.apt:
        name:
          - "{{ signage_browser_package }}"
        state: present

- name: RedHat-based distro - Ensure package requirements are met
  become: yes
  when: ansible_distribution == 'Fedora'
  block:
    - name: Ensure required packages are installed
      ansible.builtin.dnf:
        name:
          - xorg-x11-server-Xorg
          - xorg-x11-xinit
          - xdotool
          - xrandr
          #- x11-xserver-utils
          - python3
        state: present

    - name: Ensure Browser is installed
      ansible.builtin.dnf:
        name:
          - "{{ signage_browser }}"
        state: present

- name: System configuration
  become: yes
  block:
    - name: Ensure signage system user exists
      ansible.builtin.user:
        name: "{{ signage_user }}"
        comment: User for ansible-digital-signage

    - name: Set Timezone according to configuration
      community.general.timezone:
        name: "{{ signage_timezone }}"

    - name: Create signage directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "/var/ansible-digital-signage"
        - "/opt/ansible-digital-signage"

    - name: Write schedule file
      ansible.builtin.template:
        src: "files/signage-schedule.j2"
        dest: "/var/ansible-digital-signage/signage-schedule"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
        mode: 0664

    - name: Install script to read schedule file
      ansible.builtin.copy:
        src: "files/find-url-from-schedule.py"
        dest: "/opt/ansible-digital-signage/find-url-from-schedule.py"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
    
    - name: Ensure current URL file exists
      ansible.builtin.file:
        path: "/var/ansible-digital-signage/current"
        state: touch
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
        mode: 0755
    
    - name: Install default/placeholder HTML file
      ansible.builtin.copy:
        src: "{{ signage_placeholder }}"
        dest: "/opt/ansible-digital-signage/signage-placeholder.html"
        owner: "{{ signage_user }}"
        group: "{{ signage_user }}"
    
    - name: Install systemd units for signage display
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0664
      loop:
        - { src: "files/signage-startx.service.j2", dest: "/etc/systemd/system/signage-startx.service" }
        - { src: "files/signage-chrome.service.j2", dest: "/etc/systemd/system/signage-chrome.service" }
        - { src: "files/signage-chrome.timer.j2", dest: "/etc/systemd/system/signage-chrome.timer" }
        - { src: "files/signage-display-off.service.j2", dest: "/etc/systemd/system/signage-display-off.service" }
        - { src: "files/signage-refresh.service.j2", dest: "/etc/systemd/system/signage-refresh.service" }
        - { src: "files/signage-refresh.timer.j2", dest: "/etc/systemd/system/signage-refresh.timer" }
        - { src: "files/signage-placeholder-on-boot.service.j2", dest: "/etc/systemd/system/signage-placeholder-on-boot.service" }

    - name: Install systemd units to automatically reload the displayed page
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "0644"
      when: reload
      loop:
        - { src: "files/signage-autoreload.service.j2", dest: "/etc/systemd/system/signage-autoreload.service" }
        - { src: "files/signage-autoreload.timer.j2", dest: "/etc/systemd/system/signage-autoreload.timer" }

    - name: Force systemd to reread configs
      ansible.builtin.systemd:
        daemon_reload: yes

- name: Enable and start systemd units
  become: yes
  block:
    - name: Enable and start X11 Display Server
      ansible.builtin.systemd:
        name: signage-startx
        enabled: yes
    
    - name: Enable and start autoreload units
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - signage-autoreload.service
        - signage-autoreload.timer
        - signage-refresh.timer
        - signage-refresh.service
      when: reload